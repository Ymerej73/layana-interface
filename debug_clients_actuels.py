#!/usr/bin/env python3
"""
Script pour debugger les clients actuels
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import get_reservations_actuelles, get_chambres_actuelles_from_reservations

def debug_clients_actuels():
    """Debugger les clients actuels"""
    print("üîç === DEBUG CLIENTS ACTUELS ===\n")
    
    # Test 1: R√©cup√©rer les r√©servations actuelles
    print("1. R√©cup√©ration des r√©servations actuelles...")
    try:
        reservations = get_reservations_actuelles()
        print(f"   ‚úÖ {len(reservations)} r√©servations trouv√©es")
        
        if reservations:
            print("   üìã Aper√ßu des r√©servations:")
            for i, res in enumerate(reservations[:3]):  # Afficher les 3 premi√®res
                print(f"      {i+1}. ID: {res.get('resv_name_id')}, Chambre: {res.get('room_no')}, Statut: {res.get('statut')}")
                print(f"         Arriv√©e: {res.get('arrival')}, D√©part: {res.get('departure')}")
                print(f"         Client principal: {res.get('client_principal_id')}")
                print(f"         Client secondaire: {res.get('client_secondaire_id')}")
        else:
            print("   ‚ö†Ô∏è Aucune r√©servation trouv√©e")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {str(e)}")
        return
    
    # Test 2: Convertir en chambres actuelles
    print("\n2. Conversion en chambres actuelles...")
    try:
        chambres = get_chambres_actuelles_from_reservations(reservations)
        print(f"   ‚úÖ {len(chambres)} chambres trouv√©es")
        
        if chambres:
            print("   üè® Aper√ßu des chambres:")
            for i, chambre in enumerate(chambres[:3]):  # Afficher les 3 premi√®res
                print(f"      {i+1}. Chambre: {chambre.get('room_no')}")
                print(f"         Cat√©gorie: {chambre.get('room_category_label')}")
                print(f"         Clients: {len(chambre.get('clients', []))}")
                for client in chambre.get('clients', []):
                    print(f"           - {client.get('guest_name')} ({client.get('role')}) - VIP: {client.get('vip')}")
        else:
            print("   ‚ö†Ô∏è Aucune chambre trouv√©e")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {str(e)}")
        return
    
    # Test 3: V√©rifier les donn√©es manquantes
    print("\n3. V√©rification des donn√©es manquantes...")
    missing_room = 0
    missing_client = 0
    
    for res in reservations:
        if not res.get('room_no'):
            missing_room += 1
        if not res.get('client_principal_id') and not res.get('client_secondaire_id'):
            missing_client += 1
    
    print(f"   üìä R√©servations sans chambre: {missing_room}")
    print(f"   üìä R√©servations sans client: {missing_client}")
    
    # Test 4: V√©rifier les statuts
    print("\n4. V√©rification des statuts...")
    statuts = {}
    for res in reservations:
        statut = res.get('statut', 'inconnu')
        statuts[statut] = statuts.get(statut, 0) + 1
    
    for statut, count in statuts.items():
        print(f"   üìã {statut}: {count} r√©servations")
    
    # R√©sum√©
    print("\n" + "="*50)
    print("üéØ R√âSUM√â DU DEBUG")
    print("="*50)
    print(f"‚úÖ R√©servations totales: {len(reservations)}")
    print(f"‚úÖ Chambres organis√©es: {len(chambres)}")
    print(f"‚úÖ Donn√©es coh√©rentes: {'Oui' if len(chambres) > 0 else 'Non'}")
    
    if len(chambres) == 0:
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS:")
        print("   ‚Ä¢ Aucune chambre trouv√©e")
        print("   ‚Ä¢ V√©rifier les donn√©es de r√©servation")
        print("   ‚Ä¢ V√©rifier les relations client-r√©servation")
    else:
        print("\n‚úÖ TOUT SEMBLE CORRECT")
        print("   ‚Ä¢ Les donn√©es sont coh√©rentes")
        print("   ‚Ä¢ Les clients sont bien associ√©s")
        print("   ‚Ä¢ Les chambres sont organis√©es")

if __name__ == "__main__":
    debug_clients_actuels()
